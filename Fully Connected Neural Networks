import matplotlib.pyplot as plt
import os
import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow.keras.losses import CategoricalCrossentropy
from tensorflow.keras import optimizers
from tensorflow.keras import datasets, layers, models, Sequential, Input
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.metrics import classification_report, plot_confusion_matrix
from sklearn.model_selection import train_test_split

# Maek clinical data as numpy array
metadata_dir = "/data/Projects/Deep_learning/eg/data/Metadata/"
data_dir = "/data/Projects/Deep_learning/eg/data/NIFTI/2.normalized_nparrays&labels/96_96_32/"
df = pd.read_excel(
    metadata_dir + "MetadataDuke_96_96_32_DeeplearningServer.xlsx")

Clinicaldata = []

for i in range(len(df)):
    if df.loc[i, "RECURwithin3yrs"] == "NotSure":
        continue
    Clinicaldata.append(list(df.iloc[i, 9:13]))
Clinicaldata = np.array(Clinicaldata, dtype="float32")
Clinicaldata = np.where(Clinicaldata == 0, 0.1, Clinicaldata)

print("Clinicaldata Numpy Array shape is " + str(Clinicaldata.shape))

labels = []
for i in range(len(df)):
    if df.loc[i, "RECURwithin3yrs"] == "NotSure":
        continue
    if df.loc[i, "RECURwithin3yrs"] == 'NoRECUR':
        labels.append(0)
    if df.loc[i, "RECURwithin3yrs"] == 'RECURwithin3yrs':
        labels.append(1)
    if df.loc[i, "RECURwithin3yrs"] == 'RECURafter3yrs':
        labels.append(2)

labels = np.array(labels)
labels = labels.reshape(labels.shape[0], 1)
labels = to_categorical(labels, num_classes=3, dtype='float32')

print("labels Numpy Array shape is " + str(labels.shape))
np.save(data_dir + "ClinicaldataNumpyArray.npy", Clinicaldata)
np.save(data_dir + "ClinicaldataNumpyArray_labels_Categorized.npy", labels)


def FCNN(learning_rate):

    Adam = optimizers.Adam(learning_rate=learning_rate)
    loss = CategoricalCrossentropy(from_logits=False)
    model = Sequential()
    model.add(Input(shape=(x_train.shape[1],)))
    model.add(layers.Dense(
        x_train.shape[1]*2, activation='relu', kernel_initializer='he_normal'))
    model.add(layers.Dense(
        x_train.shape[1]*8, activation='relu', kernel_initializer='he_normal'))
    model.add(layers.Dropout(0.3))
    model.add(layers.Dense(
        x_train.shape[1]*16, activation='relu', kernel_initializer='he_normal'))
    model.add(layers.Dropout(0.3))
    model.add(layers.Dense(1024, activation='relu',
              kernel_initializer='he_normal'))
    model.add(layers.Dropout(0.3))
    model.add(layers.Dense(3, activation='softmax',
              kernel_initializer='he_normal'))
    model.compile(loss=loss, optimizer=Adam, metrics=['accuracy'])

    return model


# Training

data_dir = "/data/Projects/Deep_learning/eg/data/NIFTI/2.normalized_nparrays&labels/96_96_32/"
model_dir = "/data/Projects/Deep_learning/eg/FCNforClinicaldata/model/"
result_dir = "/data/Projects/Deep_learning/eg/FCNforClinicaldata/result/"

CountNumpyArrayFileName = "ClinicaldataNumpyArray.npy"
LabelsNumpyArrayFileName = "ClinicaldataNumpyArray_labels_Categorized.npy"

lr = 0.01
epochs = 100
batch_size = 128
model_name = "FCNN"

x = np.load(os.path.join(data_dir, CountNumpyArrayFileName))
y = np.load(os.path.join(data_dir, LabelsNumpyArrayFileName))

x_train, x_test, y_train, y_test = train_test_split(
    x, y, test_size=0.2, random_state=2022, shuffle=True, stratify=y)

model = FCNN(lr)
model.compile(loss='categorical_crossentropy',
              optimizer='adam', metrics=['accuracy'])

early_stop = EarlyStopping(
    monitor='val_loss', mode='min', verbose=1, patience=10)

history = model.fit(x_train, y_train, epochs=epochs, batch_size=batch_size,
                    validation_data=(x_test, y_test), callbacks=[early_stop])

model.save(os.path.join(model_dir, model_name))

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim((0, 1))
plt.legend(['Train', 'Test'], loc='upper left')
plt.savefig(os.path.join(result_dir, model_name + '.png'),
            dpi=300, facecolor='#eeeeee')

plot_confusion_matrix(model, x_test, y_test, normalize='true', display_labels=[
                      'NoRECUR', 'RECURwithin3yrs', 'RECURafter3yrs'])
plt.savefig(os.path.join(result_dir, model_name +
            '_confusion_matrix.png'), dpi=300, facecolor='#eeeeee')

report = classification_report(np.argmax(y_test, axis=1), np.argmax(model.predict(
    x_test), axis=1), target_names=['NoRECUR', 'RECURwithin3yrs', 'RECURafter3yrs'])
with open(os.path.join(result_dir, model_name + ".txt"), "w") as text_file:
    text_file.write(report)
